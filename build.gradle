import net.minecraftforge.gradle.patcher.tasks.ReobfuscateJar

plugins {
    id "de.undercouch.download" version "5.3.0"
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = mod_version
group = maven_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = archives_base_name
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: '1.19'
    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            workingDirectory project.file('run')
            arg "-mixin.config=forgecef.mixins.json"
            property 'forge.logging.console.level', 'debug'

            mods {
                citadel {
                    source sourceSets.main
                }
            }
        }

        server {
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            workingDirectory project.file('run')
            arg "-mixin.config=forgecef.mixins.json"


            property 'forge.logging.console.level', 'debug'

            mods {
                citadel {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]
            mods {
                citadel {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        name = "CurseMaven"
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    mavenCentral()
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.2.6'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "mcef",
                "Specification-Vendor"    : "forgecef",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "forgecef",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "forgecef.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "forgecef.refmap.json"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

sourceSets {
    main.resources.srcDirs += 'src/generated/resources'

    jcef {
        java {
            srcDir "java-cef/java"
            exclude "**/tests/**"
        }
    }

    main {
        compileClasspath += jcef.output
        runtimeClasspath += jcef.output
    }
}

import org.apache.tools.ant.taskdefs.condition.Os

// From com.cinemamod.fabric.cef.Platform enum
var platforms = ["linux_amd64", "linux_arm64", "windows_amd64", "windows_arm64", "macos_amd64", "macos_arm64"]

task downloadJcef {
    for (String platform : platforms) {
        try {
            "https://ewr1.vultrobjects.com/cinemamod-libraries/cef/$cef_branch/$platform/manifest.txt".toURL().text.eachLine {
                var fileHash = it.split("  ")[0]
                var relFilePath = it.split("  ")[1]
                var cefResourceUrl = "https://ewr1.vultrobjects.com/cinemamod-libraries/cef/$cef_branch/$platform/$relFilePath"
                download.run {
                    src cefResourceUrl
                    dest "src/main/resources/assets/mcef/cef/$platform/$relFilePath"
                    overwrite false
                }
                if (Os.isFamily(Os.FAMILY_UNIX)) {
                    if (relFilePath.contains("chrome-sandbox") || relFilePath.contains("jcef_helper")) {
                        exec {
                            commandLine("chmod", "700", "src/main/resources/assets/mcef/cef/$platform/$relFilePath")
                        }
                    }
                }
            }
        } catch (Exception e) {
            println("Skipping CEF libraries for $cef_branch/$platform")
            println(e.getMessage())
        }
    }
}

void createPlatformJarTask(String platform) {
    Task platformJarTask = task("jar_$platform", type: ReobfuscateJar, dependsOn: jar) {
        input = jar.archiveFile

        onlyIf {
            new File("src/main/resources/assets/mcef/cef/$platform").exists()
        }
    }

    build.dependsOn(platformJarTask)
}

platforms.forEach(platform -> createPlatformJarTask(platform))

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}